import sun.tools.jar.resources.jar

apply plugin: 'application'
apply plugin: 'scala'

repositories {
    mavenCentral()

    ivy {
        ivyPattern "${projectDir}/play-2.1.1/repository/local/[organisation]/[module]/[revision]/ivys/ivy.xml"
        artifactPattern "${projectDir}/play-2.1.1/repository/local/[organisation]/[module]/[revision]/jars/[module].[ext]"
    }
}

dependencies {
    compile 'org.hamcrest:hamcrest-core:1.1'
    compile 'org.scalatest:scalatest_2.10:1.9.1'

    compile group: 'play', name: 'play_2.10', version: '2.1.1', configuration: 'compile'
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main']
        }
    }

    test {
        scala {
            srcDirs = ['src/test']
        }
    }
}

// TODO: move to custom task class
tasks.addRule("Pattern: generate<Type>BoardConfiguration") { String taskName ->
    if (taskName.startsWith('generate') && taskName.endsWith('BoardConfiguration')) {
        task(taskName) {
            dependsOn configurations.compile, build
            doLast {
                final boardConfigurationName = taskName - 'generate' - 'BoardConfiguration'
                final boardConfigurationType = camelCaseToHyphenated(boardConfigurationName[0].toLowerCase() + boardConfigurationName.substring(1))

                final classpath = configurations.compile.inject(tasks.jar.archivePath.toString()) { String accum, File file ->
                    "${accum}:${file}"
                }
                final env = [
                        "CLASSPATH=${classpath}",
                        "JAVA_HOME=${System.getenv('JAVA_HOME')}",
                        "SCALA_HOME=${System.getenv('SCALA_HOME')}"
                ]

                final command = ["${projectDir}/setter-for-catan.scala", boardConfigurationType]
                final process = command.execute(env, null)

                println (process.text)
            }
        }
    }
}

String camelCaseToHyphenated(final camelCasedString) {
    int index = indexOfUpperCaseLetter(camelCasedString, 0)
    if (index == -1) {
        camelCasedString
    } else {
        String result = ''

        def range = 0..<index
        while (index != -1) {
            result += camelCasedString[range] + '-' + camelCasedString[index].toLowerCase()
            index = indexOfUpperCaseLetter(camelCasedString, index + 1)
            range = range.to+2..<index
        }

        result + camelCasedString.substring(range.to)
    }
}

int indexOfUpperCaseLetter(String camelCasedString, int start) {
    int index = camelCasedString.substring(start).findIndexOf { letter ->
        def upperCaseLetters = 'A'..'Z'

        upperCaseLetters.contains(letter)
    }

    (index == -1) ? index : start + index
}
